rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function hasRole(role) {
      return isAuthenticated() && getUserData().role == role;
    }

    function isCreator() {
      return hasRole('creator') || isAdmin();
    }

    function canAccessJournal(journalData) {
      return isOwner(journalData.userId) || 
             !journalData.isPrivate || 
             (journalData.sharedWith != null && request.auth.uid in journalData.sharedWith);
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && (
        (isOwner(userId) && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role'])) ||
        isAdmin()
      );
      allow delete: if isAdmin();

      // Nested goals collection
      match /goals/{goalId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow create: if isAuthenticated() && isOwner(userId);
        allow update, delete: if isAuthenticated() && isOwner(userId);

        // Nested progress collection
        match /progress/{progressId} {
          allow read: if isAuthenticated() && isOwner(userId);
          allow create: if isAuthenticated() && isOwner(userId);
          allow update, delete: if isAuthenticated() && isOwner(userId);
        }
      }

      // Nested journals collection
      match /journals/{journalId} {
        allow read: if isAuthenticated() && (
          isOwner(userId) || 
          !resource.data.isPrivate ||
          (resource.data.sharedWith != null && request.auth.uid in resource.data.sharedWith)
        );
        allow create: if isAuthenticated() && isOwner(userId);
        allow update, delete: if isAuthenticated() && isOwner(userId);

        // Nested entries collection
        match /entries/{entryId} {
          allow read: if isAuthenticated() && (
            isOwner(userId) ||
            !resource.data.isPrivate ||
            (get(/databases/$(database)/documents/users/$(userId)/journals/$(journalId)).data.sharedWith != null &&
             request.auth.uid in get(/databases/$(database)/documents/users/$(userId)/journals/$(journalId)).data.sharedWith)
          );
          allow create: if isAuthenticated() && isOwner(userId);
          allow update, delete: if isAuthenticated() && isOwner(userId);
        }
      }
    }

    // Templates collection rules (marketplace)
    match /templates/{templateId} {
      allow read: if isAuthenticated() && (
        resource.data.isPublic || 
        resource.data.creatorId == request.auth.uid ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        request.resource.data.creatorId == request.auth.uid ||
        isAdmin()
      );
      allow update, delete: if isAuthenticated() && (
        resource.data.creatorId == request.auth.uid ||
        isAdmin()
      );
    }

    // Subscriptions collection rules
    match /subscriptions/{subscriptionId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      allow delete: if isAdmin();
    }
  }
} 
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        request.auth.token.role == 'admin';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isJournalOwner(journalData) {
      return isAuthenticated() && request.auth.uid == journalData.userId;
    }

    function isGoalOwner(goalId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/goals/$(goalId)) &&
        get(/databases/$(database)/documents/goals/$(goalId)).data.userId == request.auth.uid;
    }

    function isEntryOwner(entryId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/entries/$(entryId)) &&
        get(/databases/$(database)/documents/entries/$(entryId)).data.userId == request.auth.uid;
    }

    function isTemplateOwner(templateId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/templates/$(templateId)) &&
        get(/databases/$(database)/documents/templates/$(templateId)).data.userId == request.auth.uid;
    }

    function isMarketplaceTemplateOwner(templateId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/marketplaceTemplates/$(templateId)) &&
        get(/databases/$(database)/documents/marketplaceTemplates/$(templateId)).data.userId == request.auth.uid;
    }

    function isUserAffirmationOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function hasRole(role) {
      return isAuthenticated() && request.auth.token.role == role;
    }

    function isCreator() {
      return hasRole('creator') || isAdmin();
    }

    function canAccessJournal(journalData) {
      return isOwner(journalData.userId) || 
             !journalData.isPrivate || 
             (journalData.sharedWith != null && request.auth.uid in journalData.sharedWith);
    }

    function hasValidUserDocument(userId) {
      return exists(/databases/$(database)/documents/users/$(userId));
    }
    
    function isValidProgressData() {
      let data = request.resource.data;
      return data.goalId is string &&
             data.userId is string &&
             data.targetName is string &&
             data.value is string &&
             data.currentValue is number &&
             data.timestamp is timestamp &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp &&
             (data.photoUrls == null || data.photoUrls is list) &&
             (data.reflection == null || data.reflection is string);
    }

    // Collection-level rules
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow write: if isAuthenticated() && (isOwner(userId) || isAdmin());

      // User's journals subcollection
      match /journals/{journalId} {
        allow read, write: if isAuthenticated() && (isOwner(userId) || isAdmin());

        // Journal entries subcollection
        match /entries/{entryId} {
          allow read, write: if isAuthenticated() && (isOwner(userId) || isAdmin());
        }
      }

      // User's goals subcollection
      match /goals/{goalId} {
        allow read, write: if isAuthenticated() && (isOwner(userId) || isAdmin());
      }
    }

    // User affirmations collection
    match /userAffirmations/{docId} {
      allow read, write: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }

    // Templates collection
    match /templates/{templateId} {
      allow read: if true;
      allow create: if isAdmin() || isCreator();
      allow update: if isAdmin() || isCreator();
      allow delete: if isAdmin();
    }

    // Marketplace templates collection
    match /marketplaceTemplates/{templateId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isMarketplaceTemplateOwner(templateId);
    }

    // Collection group rules for progress_history
    match /{path=**}/progress_history/{progressId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
      allow delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
    }
  }
} 
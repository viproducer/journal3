rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function hasRole(role) {
      return isAuthenticated() && getUserData().role == role;
    }

    function isCreator() {
      return hasRole('creator') || isAdmin();
    }

    function canAccessJournal(journalData) {
      return isOwner(journalData.userId) || 
             !journalData.isPrivate || 
             (journalData.sharedWith != null && request.auth.uid in journalData.sharedWith);
    }

    function hasValidUserDocument(userId) {
      return exists(/databases/$(database)/documents/users/$(userId));
    }
    
    function isValidProgressData() {
      let data = request.resource.data;
      return data.goalId is string &&
             data.userId is string &&
             data.targetName is string &&
             data.value is string &&
             data.currentValue is number &&
             data.timestamp is timestamp &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp &&
             (data.photoUrls == null || data.photoUrls is list) &&
             (data.reflection == null || data.reflection is string);
    }

    // User document rules
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && 
        request.resource.data.id == userId &&
        request.resource.data.email is string &&
        request.resource.data.role is string &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.updatedAt is timestamp;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);

      // Goals subcollection rules
      match /goals/{goalId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId) && 
          request.resource.data.userId == userId &&
          request.resource.data.title is string &&
          request.resource.data.description is string &&
          request.resource.data.category is string &&
          request.resource.data.type is string &&
          request.resource.data.targets is list &&
          request.resource.data.targets.size() > 0 &&
          request.resource.data.createdAt is timestamp &&
          request.resource.data.updatedAt is timestamp;
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);

        // Progress history subcollection rules
        match /progress_history/{progressId} {
          allow read: if isOwner(userId);
          allow create: if isOwner(userId) && isValidProgressData();
          allow update: if isOwner(userId) && isValidProgressData();
          allow delete: if isOwner(userId);
        }
      }

      // Journals subcollection rules
      match /journals/{journalId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId) && 
          request.resource.data.userId == userId &&
          request.resource.data.name is string &&
          request.resource.data.description is string &&
          request.resource.data.createdAt is timestamp &&
          request.resource.data.updatedAt is timestamp;
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);

        // Entries subcollection rules
        match /entries/{entryId} {
          allow read: if isOwner(userId);
          allow create: if isOwner(userId) && 
            request.resource.data.userId == userId &&
            request.resource.data.journalId == journalId &&
            request.resource.data.content is string &&
            request.resource.data.createdAt is timestamp &&
            request.resource.data.updatedAt is timestamp;
          allow update: if isOwner(userId);
          allow delete: if isOwner(userId);
        }
      }
    }

    // Collection group rules for progress_history
    match /{path=**}/progress_history/{progressId} {
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId &&
        isValidProgressData();
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId &&
        isValidProgressData();
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }

    // Root collections
    match /journals/{journalId} {
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow write: if false; // All writes must go through user subcollection
    }

    match /entries/{entryId} {
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow write: if false; // All writes must go through journal subcollection
    }

    match /templates/{templateId} {
      allow read: if true;
      allow write: if false;
    }

    match /subscriptions/{subscriptionId} {
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }
  }
} 